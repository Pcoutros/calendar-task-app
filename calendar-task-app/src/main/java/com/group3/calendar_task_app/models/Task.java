/**
 * The task class models a calendar task for the application. It includes details surrounding the task 
 * such as title, date, category, priority, completion, and reminders. The reminders are optional fields 
 * while title, date, priority, and category are required. 
 * Date includes time. 
 * 
 * Jakarta Persistance annotations map the task to a relational database (H2)
 * 
 * References:
 * https://jakarta.ee/learn/docs/jakartaee-tutorial/current/persist/persistence-intro/persistence-intro.html
 * https://spring.io/guides/gs/accessing-data-jpa
 * https://spring.io/guides/gs/handling-form-submission
 */

package com.group3.calendar_task_app.models;

import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Task {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long id;			// Autogenerated unique ID for the relational database
	
	private String title;
	private int priority; 		// 1: High, 2: Medium, 3: Low
   	private LocalDateTime date;
	private boolean complete;
	private String category; 	// e.g., Work, Personal, Urgent (Freeform entry)
	
    // Reminder fields
    private boolean reminder;
    private LocalDateTime reminderTime;
    private boolean reminderSent;		// Flag so reminders are only sent once
	
	// No argument constructor is needed for Jarkarta
	public Task() {}
	
	// Getters and Setters
	
	/**
	 * Returns task ID
	 */
	public long getId() {
		return id;
	}
	
	/**
	 * Returns task title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Sets task title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Returns task priority
	 */
	public int getPriority() {
		return priority;
	}

	/**
	 * Sets task priority
	 */
	public void setPriority(int priority) {
		this.priority = priority;
	}

	/**
	 * Returns task date (and time)
	 */
	public LocalDateTime getDate() {
		return date;
	}

	/**
	 * Sets task date (and time)
	 */
	public void setDate(LocalDateTime date) {
		this.date = date;
	}

	/**
	 * Returns task complete flag
	 */
	public boolean isComplete() {
		return complete;
	}

	/**
	 * Sets task complete flag
	 */
	public void setComplete(boolean complete) {
		this.complete = complete;
	}

	/**
	 * Returns task category
	 */
	public String getCategory() {
		return category;
	}

	/**
	 * Sets task category
	 */
	public void setCategory(String category) {
		this.category = category;
	}

	/**
	 * Returns task reminder flag
	 */
	public boolean isReminder() {
		return reminder;
	}

	/**
	 * Sets task reminder flag
	 */
	public void setReminder(boolean reminder) {
		this.reminder = reminder;
	}

	/**
	 * Returns task reminder date (and time)
	 */
	public LocalDateTime getReminderTime() {
		return reminderTime;
	}

	/**
	 * Sets task reminder date (and time)
	 */
	public void setReminderTime(LocalDateTime reminderTime) {
		this.reminderTime = reminderTime;
	}

	/**
	 * Returns task reminder sent flag
	 */
	public boolean isReminderSent() {
		return reminderSent;
	}

	/**
	 * Sets task reminder sent flag
	 */
	public void setReminderSent(boolean reminderSent) {
		this.reminderSent = reminderSent;
	}
}